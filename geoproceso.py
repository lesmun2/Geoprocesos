# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Geoproceso
                                 A QGIS plugin
 Geoprocesos de datos vectoriales
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-08-26
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Lesby Munguia
        email                : lesby.munguia@unah.hn
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsSymbol
import os.path
import processing
from processing.core.Processing import Processing

# Import the code for the dialog
from .geoproceso_dialog import GeoprocesoDialog

class Geoproceso:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # Initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # Initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Geoproceso_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Geoprocesos')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API."""
        return QCoreApplication.translate('Geoproceso', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar."""
        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = ':/plugins/geoproceso/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Geoprocesos'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u'&Geoprocesos'), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""
        if self.first_start:
            self.first_start = False
            self.dlg = GeoprocesoDialog()

        self.dlg.show()
        result = self.dlg.exec_()

        if result:
            # Obtener rutas de los archivos desde los widgets QgsFileWidget
            inputFile = self.dlg.inputShape.filePath()
            clipFile = self.dlg.clipShape.filePath()
            outFile = self.dlg.outShapefile.filePath()

            # Debugging outputs
            print(f"Capa entrada= {inputFile}")
            print(f"Capa corte = {clipFile}")
            print(f"Capa salida = {outFile}")

            print("Comenzando Geoproceso...")

            # Ejecutar el corte (clip)
            clip_params = {
                'INPUT': inputFile,
                'OVERLAY': clipFile,
                'OUTPUT': 'TEMPORARY_OUTPUT'
            }
            clipped_layer = processing.run("native:clip", clip_params)['OUTPUT']
            QgsProject.instance().addMapLayer(clipped_layer)

            # Filtrar y separar la capa de ríos
            for description, buffer_distance, color in [
                ('Red hídrica Nivel 1 (Principal)', 100, '#00008B'),
                ('Red hídrica Nivel 2 (Secundaria)', 50, '#0000FF'),
                ('Red hídrica Nivel 3 (Terciaria)', 20, '#008B8B')
            ]:
                # Filtrar capa
                subset_layer = clipped_layer.clone()
                subset_layer.setName(f"{description}_Cortes")
                subset_layer.setSubsetString(f'"Descripc" = \'{description}\'')

                # Asignar color
                symbol = QgsSymbol.defaultSymbol(subset_layer.geometryType())
                symbol.setColor(QColor(color))
                subset_layer.renderer().setSymbol(symbol)
                subset_layer.triggerRepaint()
                QgsProject.instance().addMapLayer(subset_layer)

                # Aplicar buffer
                buffer_params = {
                    'INPUT': subset_layer,
                    'DISTANCE': buffer_distance,
                    'SEGMENTS': 5,
                    'DISSOLVE': False,
                    'OUTPUT': 'TEMPORARY_OUTPUT'
                }
                buffer_layer = processing.run("native:buffer", buffer_params)['OUTPUT']
                buffer_layer.setName(f"Buffer_{buffer_distance}m_{description}_Cortes")
                QgsProject.instance().addMapLayer(buffer_layer)

            print("\nPROCESO FINALIZADO!!")